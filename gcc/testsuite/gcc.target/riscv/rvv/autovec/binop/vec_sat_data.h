#ifndef HAVE_DEFINE_VEC_SAT_DATA_H
#define HAVE_DEFINE_VEC_SAT_DATA_H

#define N 16
#define TEST_UNARY_DATA(T, NAME) test_##T##_##NAME##_data
#define TEST_UNARY_DATA_WRAP(T, NAME) TEST_UNARY_DATA(T, NAME)

uint8_t TEST_UNARY_DATA(uint8_t, sat_u_add_imm)[][2][N] =
{
  { /* For add imm 0 */
    {
      0, 1, 5, 255,
      0, 1, 5, 255,
      0, 1, 5, 255,
      0, 1, 5, 255,
    },
    {
      0, 1, 5, 255,
      0, 1, 5, 255,
      0, 1, 5, 255,
      0, 1, 5, 255,
    },
  },
  { /* For add imm 1 */
    {
      0, 1, 0, 8,
      0, 1, 0, 8,
      0, 1, 0, 8,
      0, 1, 0, 8,
    },
    {
      1, 2, 1, 9,
      1, 2, 1, 9,
      1, 2, 1, 9,
      1, 2, 1, 9,
    },
  },
  { /* For add imm 254 */
    {
      0, 1, 0, 8,
      0, 1, 0, 8,
      0, 1, 0, 8,
      0, 1, 0, 8,
    },
    {
      254, 255, 254, 255,
      254, 255, 254, 255,
      254, 255, 254, 255,
      254, 255, 254, 255,
    },
  },
  { /* For add imm 255 */
    {
      0, 1, 0, 8,
      0, 1, 0, 8,
      0, 1, 0, 8,
      0, 1, 0, 8,
    },
    {
      255, 255, 255, 255,
      255, 255, 255, 255,
      255, 255, 255, 255,
      255, 255, 255, 255,
    },
  },
};

uint16_t TEST_UNARY_DATA(uint16_t, sat_u_add_imm)[][2][N] =
{
  { /* For add imm 0 */
    {
      0, 1, 5, 65535,
      0, 1, 5, 65535,
      0, 1, 5, 65535,
      0, 1, 5, 65535,
    },
    {
      0, 1, 5, 65535,
      0, 1, 5, 65535,
      0, 1, 5, 65535,
      0, 1, 5, 65535,
    },
  },
  { /* For add imm 1 */
    {
      0, 1, 0, 8,
      0, 1, 0, 8,
      0, 1, 0, 8,
      0, 1, 0, 8,
    },
    {
      1, 2, 1, 9,
      1, 2, 1, 9,
      1, 2, 1, 9,
      1, 2, 1, 9,
    },
  },
  { /* For add imm 65534 */
    {
      0, 1, 0, 8,
      0, 1, 0, 8,
      0, 1, 0, 8,
      0, 1, 0, 8,
    },
    {
      65534, 65535, 65534, 65535,
      65534, 65535, 65534, 65535,
      65534, 65535, 65534, 65535,
      65534, 65535, 65534, 65535,
    },
  },
  { /* For add imm 65535 */
    {
      0, 1, 0, 8,
      0, 1, 0, 8,
      0, 1, 0, 8,
      0, 1, 0, 8,
    },
    {
      65535, 65535, 65535, 65535,
      65535, 65535, 65535, 65535,
      65535, 65535, 65535, 65535,
      65535, 65535, 65535, 65535,
    },
  },
};

uint32_t TEST_UNARY_DATA(uint32_t, sat_u_add_imm)[][2][N] =
{
  { /* For add imm 0 */
    {
      0, 1, 5, 4294967295,
      0, 1, 5, 4294967295,
      0, 1, 5, 4294967295,
      0, 1, 5, 4294967295,
    },
    {
      0, 1, 5, 4294967295,
      0, 1, 5, 4294967295,
      0, 1, 5, 4294967295,
      0, 1, 5, 4294967295,
    },
  },
  { /* For add imm 1 */
    {
      0, 1, 0, 8,
      0, 1, 0, 8,
      0, 1, 0, 8,
      0, 1, 0, 8,
    },
    {
      1, 2, 1, 9,
      1, 2, 1, 9,
      1, 2, 1, 9,
      1, 2, 1, 9,
    },
  },
  { /* For add imm 4294967294 */
    {
      0, 1, 0, 8,
      0, 1, 0, 8,
      0, 1, 0, 8,
      0, 1, 0, 8,
    },
    {
      4294967294, 4294967295, 4294967294, 4294967295,
      4294967294, 4294967295, 4294967294, 4294967295,
      4294967294, 4294967295, 4294967294, 4294967295,
      4294967294, 4294967295, 4294967294, 4294967295,
    },
  },
  { /* For add imm 4294967295 */
    {
      0, 1, 0, 8,
      0, 1, 0, 8,
      0, 1, 0, 8,
      0, 1, 0, 8,
    },
    {
      4294967295, 4294967295, 4294967295, 4294967295,
      4294967295, 4294967295, 4294967295, 4294967295,
      4294967295, 4294967295, 4294967295, 4294967295,
      4294967295, 4294967295, 4294967295, 4294967295,
    },
  },
};

uint64_t TEST_UNARY_DATA(uint64_t, sat_u_add_imm)[][2][N] =
{
  { /* For add imm 0 */
    {
      0, 1, 5, 18446744073709551615u,
      0, 1, 5, 18446744073709551615u,
      0, 1, 5, 18446744073709551615u,
      0, 1, 5, 18446744073709551615u,
    },
    {
      0, 1, 5, 18446744073709551615u,
      0, 1, 5, 18446744073709551615u,
      0, 1, 5, 18446744073709551615u,
      0, 1, 5, 18446744073709551615u,
    },
  },
  { /* For add imm 1 */
    {
      0, 1, 0, 8,
      0, 1, 0, 8,
      0, 1, 0, 8,
      0, 1, 0, 8,
    },
    {
      1, 2, 1, 9,
      1, 2, 1, 9,
      1, 2, 1, 9,
      1, 2, 1, 9,
    },
  },
  { /* For add imm 18446744073709551614 */
    {
      0, 1, 0, 8,
      0, 1, 0, 8,
      0, 1, 0, 8,
      0, 1, 0, 8,
    },
    {
      18446744073709551614u, 18446744073709551615u,
      18446744073709551614u, 18446744073709551615u,
      18446744073709551614u, 18446744073709551615u,
      18446744073709551614u, 18446744073709551615u,
      18446744073709551614u, 18446744073709551615u,
      18446744073709551614u, 18446744073709551615u,
      18446744073709551614u, 18446744073709551615u,
      18446744073709551614u, 18446744073709551615u,
    },
  },
  { /* For add imm 18446744073709551615 */
    {
      0, 1, 0, 8,
      0, 1, 0, 8,
      0, 1, 0, 8,
      0, 1, 0, 8,
    },
    {
      18446744073709551615u, 18446744073709551615u,
      18446744073709551615u, 18446744073709551615u,
      18446744073709551615u, 18446744073709551615u,
      18446744073709551615u, 18446744073709551615u,
      18446744073709551615u, 18446744073709551615u,
      18446744073709551615u, 18446744073709551615u,
      18446744073709551615u, 18446744073709551615u,
      18446744073709551615u, 18446744073709551615u,
    },
  },
};

#define TEST_BINARY_DATA_NAME(T1, T2, NAME) test_bin_##T1##_##T2##_##NAME##_data
#define TEST_BINARY_DATA_NAME_WRAP(T1, T2, NAME) \
  TEST_BINARY_DATA_NAME(T1, T2, NAME)

#define TEST_ZIP_STRUCT_NAME(T1, T2) test_##T1##_##T2##_zip_s
#define TEST_ZIP_STRUCT_DECL(T1, T2) struct TEST_ZIP_STRUCT_NAME(T1, T2)
#define TEST_ZIP_STRUCT(T1, T2) \
  TEST_ZIP_STRUCT_DECL(T1, T2)  \
    {                           \
      T1 x[N];                  \
      T2 b;                     \
      T1 expect[N];             \
    };

TEST_ZIP_STRUCT (uint16_t, uint32_t)

TEST_ZIP_STRUCT_DECL(uint16_t, uint32_t) \
  TEST_BINARY_DATA_NAME(uint16_t, uint32_t, zip)[] =
{
  {
    { /* x.  */
      1, 1, 1, 1,
      1, 1, 1, 1,
      1, 1, 1, 1,
      0, 0, 0, 0,
    },
    1, /* b.  */
    { /* expect.  */
      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,
    },
  },
  {
    { /* x.  */
      65535, 1, 2, 8,
      65535, 1, 2, 8,
      65535, 1, 2, 8,
      65535, 1, 2, 8,
    },
    65536, /* b.  */
    { /* expect.  */
      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,
    },
  },
  {
    { /* x.  */
      65535, 16, 8, 1,
      65535, 16, 8, 1,
      65535, 16, 8, 1,
      65535, 16, 8, 1,
    },
    65535, /* b.  */
    { /* expect.  */
      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,
    },
  },
  {
    { /* x.  */
      65535, 16, 8, 1,
      65535, 16, 8, 1,
      65535, 16, 8, 1,
      65535, 16, 8, 1,
    },
    65500, /* b.  */
    { /* expect.  */
      35, 0, 0, 0,
      35, 0, 0, 0,
      35, 0, 0, 0,
      35, 0, 0, 0,
    },
  },
};

#endif
